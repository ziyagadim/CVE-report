from docx import Document
import textwrap
import os
from win32com import client as wc
from selenium import webdriver
from scrap import get_exploit

'''
this file creates both docx and pdf format report

if user wants create pdf it first creates docx file and converts it into pdf then 
deletes docx file

'''

def create_nist_document(cve_id, nist_data, output_format, exploit):
    doc = Document()

    # Title
    doc.add_heading(cve_id, 0)

    # NIST Data
    doc.add_heading('NIST Data:', level=1)
    doc.add_paragraph(f"Severity: {nist_data['severity']}")
    doc.add_paragraph(f"Vector: {nist_data['vector']}")
    doc.add_heading('Description:', level=2)
    for line in textwrap.wrap(nist_data['description'], width=90):
        doc.add_paragraph(line)
    doc.add_heading('References:', level=2)

    for link in nist_data['reference']:
        doc.add_paragraph(link)

    # add exploit
    if exploit in ['y', 'Y', '']:
        doc.add_heading('Exploits:', level=2)
        for link in get_exploit(cve_id)['exploit_link']:
            doc.add_paragraph(link)

    doc_file = f"{cve_id}_nist.docx"
    doc.save(doc_file)

    if output_format == '1':
        # Convert DOCX to PDF
        word = wc.Dispatch('Word.Application')
        doc_path = os.path.abspath(doc_file)
        pdf_path = os.path.abspath(f"{cve_id}_nist.pdf")
        wordDoc = word.Documents.Open(doc_path)
        wordDoc.SaveAs(pdf_path, FileFormat=17)
        wordDoc.Close()
        word.Quit()
        os.remove(doc_file)
        print("NIST PDF file created:", pdf_path)
    elif output_format == '2':
        print("NIST DOCX file created:", doc_file)
    else:
        print("Invalid output format. Please specify 1 for PDF or 2 for DOCX.")


    # open links
    options = webdriver.ChromeOptions()
    options.add_argument("--log-level=3")
    driver = webdriver.Chrome(options=options)

    for link in nist_data['reference'][:4]:
        driver.execute_script("window.open('{}', '_blank')".format(link))
    
    for handle in driver.window_handles:
        driver.switch_to.window(handle)

    input("\nPress something to close the browser...")


def create_mitre_document(cve_id, mitre_data, output_format, exploit):
    doc = Document()

    # Title
    doc.add_heading(cve_id, 0)

    # MITRE Data
    doc.add_heading('MITRE Data:', level=1)
    doc.add_heading('Description:', level=2)
    for line in textwrap.wrap(mitre_data['description'], width=90):
        doc.add_paragraph(line)

    doc.add_heading('Sources:', level=2)
    for link in mitre_data['references']:
        doc.add_paragraph(link)

    doc.add_heading('Assigning CNA:', level=2)
    doc.add_paragraph(mitre_data['assigning_CNA'])

    doc.add_heading('Date:', level=2)
    doc.add_paragraph(mitre_data['date'])

    doc.add_heading('Comment:', level=2)
    doc.add_paragraph(mitre_data['comment'])

    # add exploit
    if exploit in ['y', 'Y', '']:
        doc.add_heading('Exploits:', level=2)
        for link in get_exploit(cve_id)['exploit_link']:
            doc.add_paragraph(link)

    doc_file = f"{cve_id}_mitre.docx"
    doc.save(doc_file)

    if output_format == '1':
    # Convert DOCX to PDF
        word = wc.Dispatch('Word.Application')
        doc_path = os.path.abspath(doc_file)
        pdf_path = os.path.abspath(f"{cve_id}_mitre.pdf")
        wordDoc = word.Documents.Open(doc_path)
        wordDoc.SaveAs(pdf_path, FileFormat=17)
        wordDoc.Close()
        word.Quit()
        os.remove(doc_file)
    elif output_format == '2':
        print("Mitre DOCX file created:", doc_file)
    else:
        print("Invalid output format. Please specify 1 for PDF or 2 for DOCX.")

    options = webdriver.ChromeOptions()
    options.add_argument("--log-level=3")
    driver = webdriver.Chrome(options=options)

    # open links
    for link in mitre_data['references'][:4]:
        driver.execute_script("window.open('{}', '_blank')".format(link))
    
    for handle in driver.window_handles:
        driver.switch_to.window(handle)

    input("\nPress something to close the browser...")

def create_vulners_document(cve_id, vulners_data, output_format, exploit):
    doc = Document()

    # Title
    doc.add_heading(cve_id, 0)

    # Vulners Data
    doc.add_heading('Vulners Data:', level=1)
    doc.add_heading('CVVS:', level=2)
    doc.add_paragraph(vulners_data['cvvs'])
    doc.add_heading('Description:', level=2)
    for line in textwrap.wrap(vulners_data['description'], width=90):
        doc.add_paragraph(line)
    doc.add_heading('References:', level=2)


    for link in vulners_data['references']:
        doc.add_paragraph(link)

    # add exploit
    if exploit in ['y', 'Y', '']:
        doc.add_heading('Exploits:', level=2)
        for link in get_exploit(cve_id)['exploit_link']:
            doc.add_paragraph(link)


    doc_file = f"{cve_id}_vulners.docx"
    doc.save(doc_file)

    if output_format == '1':
    # Convert DOCX to PDF
        word = wc.Dispatch('Word.Application')
        doc_path = os.path.abspath(doc_file)
        pdf_path = os.path.abspath(f"{cve_id}_vulners.pdf")
        wordDoc = word.Documents.Open(doc_path)
        wordDoc.SaveAs(pdf_path, FileFormat=17)
        wordDoc.Close()
        word.Quit()
        os.remove(doc_file)
    elif output_format == '2':
        print("Vulners DOCX file created:", doc_file)
    else:
        print("Invalid output format. Please specify 1 for PDF or 2 for DOCX.")



    options = webdriver.ChromeOptions()
    options.add_argument("--log-level=3")
    driver = webdriver.Chrome(options=options)
    
    # open links
    for link in vulners_data['references'][:4]:
        driver.execute_script("window.open('{}', '_blank')".format(link))
    
    for handle in driver.window_handles:
        driver.switch_to.window(handle)

    input("\nPress something to close the browser...")



