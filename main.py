import re
from datetime import datetime
import requests


def correctate_input(user_input):
    # if input has space replace it with -
    user_input = user_input.replace(' ', '-')
    # Check if input contains 'cve' word
    if 'CVE' in user_input:
        pass
    else:
        user_input = f'CVE-{user_input}'

    return user_input


def is_valid_cve(input_str):
    pattern = r'(cve|CVE)-[0-9]{4}-[0-9]{4,}$'

    # check if year section of ID is valid
    split_input = input_str.upper().split('-') or input_str.upper().split(' ')
    if 1999 <= int(split_input[1]) <= int(datetime.now().year):
        return bool(re.match(pattern, input_str))
    else:
        pass


def is_cve_exist(cve_id):
    api_url = f"https://cveawg.mitre.org/api/cve-id/{cve_id}"

    response = requests.get(api_url)

    # Check if the response status code is successful (200 OK)
    if response.status_code == 200:
        cve_data = response.json()

        # Check if Published
        if "PUBLISHED" in cve_data["state"]:
            print(f"CVE ID {cve_id} exists.")
            return True

        # Check if Rejected
        elif "REJECTED" in cve_data["state"]:
            print("it is rejected")
            return False

        # Check if Reserverd
        elif "RESERVED" in cve_data["state"]:
            print("it is rejected")
            return False



    else:
        print(f"CVE ID {cve_id} does not exist.")
        return False
    # else:
    #     print(f"Error fetching CVE information. Status code: {response.status_code}")


# User input
user_input = correctate_input(input("Enter CVE ID: ").upper())

# Check validation
if is_valid_cve(user_input):
    # Actions if input is valid
    print("Valid CVE ID")
    is_cve_exist(user_input)

else:
    # Actions if input invalid
    print("Invalid CVE ID")
