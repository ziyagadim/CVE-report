import re
from datetime import datetime
import requests
import os
import sys
from art import *
from colorama import init, Fore, Style

def usage_message():
    print('''Hmm, it seems like the CVE ID you entered is not quite right. CVE IDs typically follow a specific format to identify security vulnerabilities. Please make sure your input looks something like this: 'CVE-YYYY-NNNN' or 'YYYY-NNNN', where:
- 'CVE' stands for Common Vulnerabilities and Exposures.
- 'YYYY' represents the year the vulnerability was assigned.
- 'NNNN' is a sequence number assigned to the vulnerability for that year.

For example, a valid CVE ID could be 'CVE-2017-0144' or '2017-0144'. Take a moment to double-check your input and try again!
''')


def is_valid_cve(input_str):
    global user_input

    pattern = r'^(cve-|CVE-)?[0-9]{4}-[0-9]{4,}$'

    if re.match(pattern,input_str):
        if not input_str.startswith("CVE-"):
            user_input = input_str = "CVE-" + input_str 

    # check if year section of ID is valid
    if bool(re.match(pattern, input_str)):
        split_input = input_str.upper().split('-') or input_str.upper().split(' ')
        if 1999 <= int(split_input[1]) <= int(datetime.now().year) and int(split_input[2]) != 0:
            return bool(re.match(pattern, input_str))
        else:
            return False


def is_cve_exist(cve_id):
    api_url = f"https://cveawg.mitre.org/api/cve-id/{cve_id}"

    response = requests.get(api_url)

    # Check if the response status code is successful (200 OK)
    if response.status_code == 200:
        cve_data = response.json()

        # Check if Published
        if "PUBLISHED" in cve_data["state"]:
            print(Fore.GREEN + f"[•] CVE ID {cve_id} exists.")
            print(Style.RESET_ALL)
            return True

        # Check if Rejected
        elif "REJECTED" in cve_data["state"]:
            print("it is rejected")
            return False

        # Check if Reserverd
        elif "RESERVED" in cve_data["state"]:
            print("it is rejected")
            return False



    else:
        return False
    

def funny_mes():
    print(Style.RESET_ALL)
    os.system('cls')
    print(Fore.MAGENTA)
    tprint("f#ck  you\n")
    tprint("I  said  give  valid  input!", font='small')
    print(Style.RESET_ALL)


sources = {"1":"nist.com",
           "2":"mitre.org",
           "3":"vulners.com"}

try:
    # Clear console
    if os.name == 'nt':
        os.system("cls")
    else:
        os.system("clear")
    

    ######  Welcoming user! --START--  ######
    tprint("Welcome  to  CVE reporter", font='small')
    ######  Welcoming user! --END--    ######
        

    # User input
    user_input = input(Fore.CYAN + "[•] Enter CVE ID: ").upper()
    print(Style.RESET_ALL)


    # Check validation
    if is_valid_cve(user_input):

        # Actions is input valid
        print(Fore.GREEN + "[•] Valid CVE ID input")
        print(Style.RESET_ALL)
        
        if is_cve_exist(user_input):
            # Actions if cve is exist

            # Ask for resource
            user_input_source = input(Fore.WHITE + "[1] nist.com\n[2] mitre.org\n[3] vulners.com\n"+ Fore.GREEN + "\nWhich source would you like to get info from: ")
            print(Style.RESET_ALL)

            attemp = 0

            # validate input
            while user_input_source not in ["1","2","3"]:

                # Count attemps
                if attemp == 2: 
                    funny_mes()
                    break
                else:
                    print(Fore.RED+ "Please enter valid answer!")
                    print(Style.RESET_ALL)
                    user_input_source = input(Fore.WHITE + "[1] nist.com\n[2] mitre.org\n[3] vulners.com\n"+ Fore.GREEN + "\nWhich source would you like to get info from: ")
                    print(Style.RESET_ALL)
                    attemp += 1
            
            # Actions after valid source input
            print(user_input_source)
            
            

        else:
            # Actions if cve doesn't exist
            print(Fore.RED + f"[•] CVE ID: {user_input} doesn't exist")
            print(Style.RESET_ALL)
            sys.exit

    else:
        # Actions if input invalid
        os.system("cls")
        print(Fore.RED)
        tprint("Invalid   CVE   ID", font="small")
        print(Style.RESET_ALL)
        print(Fore.LIGHTBLUE_EX)
        usage_message()
        print(Style.RESET_ALL)
        sys.exit



except KeyboardInterrupt:
    os.system("cls")
    print(Fore.RED + "\nExiting...")
    tprint("See you later!", font="small")
    print(Style.RESET_ALL)
    
except TypeError:
    os.system("cls")
    print(Fore.RED + "\nYou entered something wrong!")
    tprint("See you later!", font="small")
    print(Style.RESET_ALL)