import requests

api_url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2017-0144"
# information_url="https://nvd.nist.gov/vuln/detail/CVE-2023-42282"
response = requests.get(api_url)
cve_data = response.json()

vulnerabilities = cve_data["vulnerabilities"][0]["cve"]
cve_id = cve_data["vulnerabilities"][0]["cve"]["id"]
description = cve_data["vulnerabilities"][0]["cve"]["descriptions"][0]["value"]

base_severity = None
base_score = None
attackVector = None
vector_strings = None

for version in range(1, 32):
    cvss_metrics = vulnerabilities.get("metrics", {}).get(f"cvssMetricV{version}", [])
    if cvss_metrics:
        vector_strings = cvss_metrics[0].get("cvssData", {}).get("vectorString")
        if vector_strings:
            break

# Iterate over cvssMetricV2 versions from 2 to 31
for version in range(1, 32):
    cvss_metrics = vulnerabilities.get("metrics", {}).get(f"cvssMetricV{version}", [])
    if cvss_metrics:
        base_score = cvss_metrics[0].get("cvssData", {}).get("baseScore")
        if base_score:
            break

for version in range(1, 32):
    cvss_metrics = vulnerabilities.get("metrics", {}).get(f"cvssMetricV{version}", [])
    if cvss_metrics:
        base_severity = cvss_metrics[0].get("cvssData", {}).get("baseSeverity")
        if base_severity:
            break

for version in range(1, 32):
    cvss_metrics = vulnerabilities.get("metrics", {}).get(f"cvssMetricV{version}", [])
    if cvss_metrics:
        attack_vector = cvss_metrics[0].get("cvssData", {}).get("attackVector")
        if attack_vector:
            break


print("CVE-ID:", cve_id)
print("Description about this CVE-ID:", description)
# print("Severity:", severity)
if base_score is not None:
    print("Base score is", base_score)
else:
    print("Base score not found for this version.")

if base_severity is not None:
    print("Base severity is", base_severity)
else:
    print("Severity not found for this version.")

if vector_strings is not None:
    print("Vector string : ", vector_strings)
else:
    print("Vector string not found for this version.")

if attack_vector is not None:
    print("Attack vector is", attack_vector)
else:
    print("Attack vector not found for this version.")
    


# print ("You can get more detailed information about this CVE id from this link : " + information_url)