import os
import textwrap
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException 
import requests
from requests import ConnectionError
from docx import Document
from win32com import client as wc

op = webdriver.ChromeOptions()
op.add_argument('headless')
op.add_argument('--log-level=3')
driver = webdriver.Chrome(options=op)

user_input = input("Your CVE_ID : ")

def check_link_and_validation(list):
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

    
    ref_list = [elm.text for elm in list]
    ref_list = ref_list[0].split('\n')
    links = [i.split(' ')[0] for i in ref_list]

    exist_links = []
    for link in links:
        try:
            if requests.get(link, headers=headers).status_code == 200:
                exist_links.append(link)
        except ConnectionError:
            pass

    return exist_links        

def nist(cve_id):
    driver.get(f'https://nvd.nist.gov/vuln/detail/{cve_id}')

    # references
    references = driver.find_elements(By.XPATH, '//*[@id="vulnHyperlinksPanel"]/table/tbody')

    link = check_link_and_validation(references)

    # Checks Cvss3 if not exist returns cvss2
    try:
        if bool(driver.find_element(By.ID, 'Cvss3NistCalculatorAnchor')):
            severity = driver.find_element(By.ID, 'Cvss3NistCalculatorAnchor').text
            vector = driver.find_element(By.XPATH, '//*[@id="Vuln3CvssPanel"]/div[1]/div[3]/span/span').text
    except NoSuchElementException:
        if bool(driver.find_element(By.ID, 'Cvss3NistCalculatorAnchorNA')):
            driver.find_element(By.ID, 'btn-cvss2').click()
            severity = driver.find_element(By.ID, 'Cvss2CalculatorAnchor').text
            vector = driver.find_element(By.XPATH, '//*[@id="Vuln2CvssPanel"]/div[1]/div[3]/span/span').text

    # Description handling
    try:
        description = driver.find_element(By.XPATH, '//*[@id="vulnDetailTableView"]/tbody/tr/td/div/div[1]/p').text
    except NoSuchElementException:
        description = "Something went wrong with CVE ID you provided!!! Please contact with developers!"

    return {'link': link, 'severity': severity, 'vector': vector, 'description': description}

# Get NIST data
nist_data = nist(user_input)
print("NIST Data:", nist_data) 

# Define function to format nist_data into a string
def format_nist_data(data):
    formatted_text = []

    formatted_text.append("Severity: " + data['severity'])
    formatted_text.append("Vector: " + data['vector'])
    formatted_text.append("\nDescription:") 
    description_lines = textwrap.wrap(data['description'], width=90)
    formatted_text.extend(description_lines)
    formatted_text.append("\nLinks:")
    formatted_text.extend([f"- {link}" for link in data['link']])

    return formatted_text

# Create DOCX
doc = Document()

# Title
doc.add_heading(user_input, 0)

# NIST Data
doc.add_heading('NIST Data:', level=1)

# Severity and Vector
doc.add_paragraph(f"Severity: {nist_data['severity']}")
doc.add_paragraph(f"Vector: {nist_data['vector']}")

# Description
doc.add_heading('Description:', level=2)
for line in textwrap.wrap(nist_data['description'], width=90):
    doc.add_paragraph(line)

# Links
doc.add_heading('Links:', level=2)
for link in nist_data['link']:
    doc.add_paragraph(f"- {link}")

doc_file = f"{user_input}.docx"
doc.save(doc_file)

# Convert DOCX to PDF
word = wc.Dispatch('Word.Application')
doc_path = os.path.abspath(doc_file)
pdf_path = os.path.abspath(f"{user_input}.pdf")
wordDoc = word.Documents.Open(doc_path)
wordDoc.SaveAs(pdf_path, FileFormat=17)
wordDoc.Close()
word.Quit()

print("PDF file created:", pdf_path)
