from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException 
import requests
from requests import ConnectionError
import textwrap
from reportlab.lib import colors
############## PDF
import re
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
###############

op = webdriver.ChromeOptions()
op.add_argument('headless')
op.add_argument('--log-level=3')
driver = webdriver.Chrome(options=op)

user_input = input("Your CVE_ID : ")

def check_link_and_validation(list):
    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'}

    
    ref_list = [elm.text for elm in list]
    ref_list = ref_list[0].split('\n')
    links = [i.split(' ')[0] for i in ref_list]

    exist_links = []
    for link in links:
        try:
            if requests.get(link, headers=headers).status_code == 200:
                exist_links.append(link)
        except ConnectionError:
            pass

    return exist_links        

def nist(cve_id):
    driver.get(f'https://nvd.nist.gov/vuln/detail/{cve_id}')

    # references
    references = driver.find_elements(By.XPATH, '//*[@id="vulnHyperlinksPanel"]/table/tbody')

    link = check_link_and_validation(references)

    # Checks Cvss3 if not exist returns cvss2
    try:
        if bool(driver.find_element(By.ID, 'Cvss3NistCalculatorAnchor')):
            severity = driver.find_element(By.ID, 'Cvss3NistCalculatorAnchor').text
            vector = driver.find_element(By.XPATH, '//*[@id="Vuln3CvssPanel"]/div[1]/div[3]/span/span').text
    except NoSuchElementException:
        if bool(driver.find_element(By.ID, 'Cvss3NistCalculatorAnchorNA')):
            driver.find_element(By.ID, 'btn-cvss2').click()
            severity = driver.find_element(By.ID, 'Cvss2CalculatorAnchor').text
            vector = driver.find_element(By.XPATH, '//*[@id="Vuln2CvssPanel"]/div[1]/div[3]/span/span').text

    # Description handling
    try:
        description = driver.find_element(By.XPATH, '//*[@id="vulnDetailTableView"]/tbody/tr/td/div/div[1]/p').text
    except NoSuchElementException:
        description = "Something went wrong with CVE ID you provided!!! Please contact with developers!"

    return {'link': link, 'severity': severity, 'vector': vector, 'description': description}

# Get NIST data
nist_data = nist(user_input)
print("NIST Data:", nist_data) #Ziya bu kodu terminala cixartmagi ucun yazmisam lazim

# Define function to format nist_data into a string
def format_nist_data(data):
    formatted_text = []

    formatted_text.append("Severity: " + data['severity'])
    formatted_text.append("Vector: " + data['vector'])
    formatted_text.append("\nDescription:") 
    description_lines = textwrap.wrap(data['description'], width=90)
    formatted_text.extend(description_lines)
    formatted_text.append("\nLinks:")
    formatted_text.extend([f"- {link}" for link in data['link']])

    return formatted_text
 # Split the formatted text into lines

fileName = f"{user_input}.pdf"
documentTitle = f"{user_input}"
title = f"{user_input}"


# Create PDF
# Create PDF
pdf = canvas.Canvas(fileName, pagesize=letter)
pdf.setTitle(documentTitle)

# Title
pdf.setFont("Helvetica-Bold", 20)
pdf.setFillColor(colors.red)
pdf.drawString(200, 750, title)

# NIST Data
pdf.setFont("Helvetica-Bold", 16)
pdf.setFillColor(colors.black)
pdf.drawString(30, 700, "NIST Data:")
pdf.setFont("Helvetica", 12)
pdf.setFillColor(colors.darkgrey)
y_coordinate = 680
# formatted_data = format_nist_data(nist_data)
# for line in formatted_data:
#     pdf.drawString(40, y_coordinate, line)
#     y_coordinate -= 15  # Adjust y-coordinate for the next line

# Severity and Vector
# Severity
pdf.setFont("Helvetica-Bold", 12)
pdf.setFillColor(colors.black)  # Set fill color for the "Severity: " text
pdf.drawString(30, y_coordinate - 20, "Severity: ")
pdf.setFillColor(colors.darkred)  # Set fill color for the severity value
pdf.drawString(100, y_coordinate - 20, nist_data['severity'])  # Adjust x-coordinate for severity value

# Vector
pdf.setFont("Helvetica-Bold", 12)
pdf.setFillColor(colors.black)  # Set fill color for the "Vector: " text
pdf.drawString(30, y_coordinate - 50, "Vector: ")
pdf.setFillColor(colors.darkred)  # Set fill color for the vector value
pdf.drawString(100, y_coordinate - 50, nist_data['vector'])  # Adjust x-coordinate for vector value


# Description
pdf.setFont("Helvetica-Bold", 12)
pdf.drawString(30, y_coordinate - 110, "Description:")
pdf.setFont("Helvetica", 12)
pdf.setFillColor(colors.black)
y_description = y_coordinate - 130

for line in textwrap.wrap(nist_data['description'], width=90):
    pdf.drawString(30, y_description, line)
    y_description -= 15  # Adjust y-coordinate for the next line

# Links
pdf.setFont("Helvetica-Bold", 12)
pdf.setFillColor(colors.blue)
pdf.drawString(30, y_description - 30, "Links:")
y_links = y_description - 50
for link in nist_data['link']:
    pdf.drawString(30, y_links, f"- {link}")
    y_links -= 15  # Adjust y-coordinate for the next line

pdf.save()
