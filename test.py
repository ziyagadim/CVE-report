# import requests
#
#
# def check_cve_existence(cve_id):
#     api_url = f"https://cveawg.mitre.org/api/cve-id/{cve_id}"
#
#     response = requests.get(api_url)
#
#     # Check if the response status code is successful (200 OK)
#     if response.status_code == 200:
#         cve_data = response.json()
#
#         # Check if Published
#         if "PUBLISHED" in cve_data["state"]:
#             print(f"CVE ID {cve_id} exists.")
#
#         # Check if Rejected
#         elif "REJECTED" in cve_data["state"]:
#             print("it is rejected")
#
#         # Check if Reserverd
#         elif "RESERVED" in cve_data["state"]:
#             print("it is rejected")
#
#
#
#         else:
#             print(f"CVE ID {cve_id} does not exist.")
#     else:
#         print(f"Error fetching CVE information. Status code: {response.status_code}")
#
#
# # Example usage:
# check_cve_existence("CVE-2024-26484")
# check_cve_existence("CVE-2017-0144")
########################################################################################################################

""""
import re
from datetime import datetime


def is_valid_cve(input_str):
    pattern = r'(cve|CVE)-[0-9]{4}-[0-9]{4,}$'

    #
    input_str = input_str.replace(' ', '-')

    # Check if input contains 'cve' word
    if 'CVE' in input_str:
        pass
    else:
        input_str = f'CVE-{input_str}'

    # check if year section of ID is valid
    split_input = input_str.upper().split('-')
    if 1999 <= int(split_input[1]) <= int(datetime.now().year):
        return bool(re.match(pattern, input_str))
    else:
        pass


user_input = input("Enter CVE ID: ").upper()

# Check validation
if is_valid_cve(user_input):
    # Actions if input is valid
    print("Valid CVE ID")
else:
    # Actions if input invalid
    print("Invalid CVE ID")
"""



""""
def check_and_adjust_cve_input(user_input):
    if not user_input.startswith("CVE"):
        user_input = "CVE-" + user_input
    return user_input

# Example usage:
user_input = input("Enter CVE ID: ")
user_input = check_and_adjust_cve_input(user_input)
print("Adjusted CVE ID:", user_input)

"""
'''
import re

def  is_valid(input):
    pattern = r'^[0-9]{4}-[0-9]{4,}$'

    return bool(re.match(pattern, "input"))


print(is_valid("2015-0144"))

'''
'''
import re

input = input("ID: ").upper()
valid = re.match(r"^(cve-|CVE-)?[0-9]{4}-[0-9]{4,}$", input)


if valid:
    print("true")
    if not input.startswith("CVE-"):
        input = "CVE-" + input
        
else:
    print("Wrong!")



print(input)

'''

'''
import requests

def scrape_cve_data(cve_id):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    
    try:
        # Send HTTP GET request to the URL
        response = requests.get(url)
        
        # Check if request was successful
        response.raise_for_status()
        
        # Parse JSON response
        cve_data = response.json()
        
        # Extracting and printing description
        descriptions = cve_data.get('result', {}).get('CVE_Items', [{}])[0].get('cve', {}).get('descriptions', [])
        if descriptions:
            print("Description:", descriptions[0].get('value'))
        else:
            print(f"Description for CVE ID {cve_id} not found.")
    
    except requests.exceptions.HTTPError as e:
        print(f"HTTP error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")



scrape_cve_data("CVE-2015-0144")
'''
'''
import requests
import time

url = f"https://cveawg.mitre.org/api/cve/CVE-2017-0144"

response = requests.get(url)

# Check if status code is 200:
if response.status_code == 200:
    data = response.json()

    affected_product = data["containers"]["cna"]["affected"][0]["product"]
    affected_vendor = data["containers"]["cna"]["affected"][0]["vendor"]

    description = data["containers"]["cna"]["descriptions"][0]["value"]

    #Url vlidation didn't checked
    references = [link['url'] for link in data["containers"]["cna"]["references"]]




else:
    print("something went wrong please try another source!")




print(references)

'''   

'''
import requests

url = f"https://vulners.com/api/v3/search/id/?id=CVE-2017-0144"

response = requests.get(url)

# Check if status code is 200:
if response.status_code == 200:
    data = response.json()

'''


import requests

def vulner_com(cve_id):
    url = f"https://vulners.com/api/v3/search/id/?id={cve_id}"

    response = requests.get(url)

    # Check if status code is 200:
    if response.status_code == 200:
        data = response.json()["data"]["documents"][f'{cve_id}']
        description = data["description"]
        




